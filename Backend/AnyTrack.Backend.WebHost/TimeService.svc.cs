// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Permissions;
using System.Security.Principal;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading;
using System.Web.Security;

namespace AnyTrack.Backend.WebHost
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "TimeService" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select TimeService.svc or TimeService.svc.cs at the Solution Explorer and start debugging.
    public class TimeService : ITimeService
    {
        public TimeService()
        {
            var messageProperty = (HttpRequestMessageProperty)OperationContext.Current.IncomingMessageProperties[HttpRequestMessageProperty.Name];
            string cookie = messageProperty.Headers.Get("Set-Cookie");
            if (!string.IsNullOrWhiteSpace(cookie))
            {
                var parts = cookie.Split(';');
                var authPath = parts[0].Replace("AuthCookie=", "");
                var ticket = FormsAuthentication.Decrypt(authPath);

                var identity = new GenericIdentity(ticket.Name, "FormsAuthentication");
                var principal = new GenericPrincipal(identity, new string[0]);
                Thread.CurrentPrincipal = principal;
            }
        }

        [PrincipalPermission(SecurityAction.Demand, Name = "andrew.fletcher16@gmail.com")]
        public DateTime DoWork()
        {
            var x = Thread.CurrentPrincipal;
            return DateTime.Now;
        }
    }
}
